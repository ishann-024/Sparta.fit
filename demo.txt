fix the HTMl and CSS of this page only change the CSS of form to make it attractive
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Job Requests</title>

    <!-- FontAwesome CDN for icons -->
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
        crossorigin="anonymous"
        referrerpolicy="no-referrer"
    />
</head>
<body>
    <div class="applications-container">
        <!-- Header Section -->
        <section class="applications-header">
            <div class="header-content">
                <h1 class="page-title">Job Requests</h1>
                <p class="page-subtitle">Create and manage resource requests for your projects</p>
                <div class="applications-stats">
                    <div class="stat-item stats-total">
                        <div class="stat-number">{{allJobRequestCount}}</div>
                        <div class="stat-label">Total Job Requests</div>
                    </div>
                    <div class="stat-item stats-approved">
                        <div class="stat-number">{{approvedJobRequestsCount}}</div>
                        <div class="stat-label">Approved</div>
                    </div>
                    <div class="stat-item stats-declined">
                        <div class="stat-number">{{declinedJobRequestsCount}}</div>
                        <div class="stat-label">Declined</div>
                    </div>
                    <div class="stat-item stats-pending">
                        <div class="stat-number">{{pendingJobRequest}}</div>
                        <div class="stat-label">Pending</div>
                    </div>
                </div>
            </div>
        </section>

        <!-- ============ EDIT FORM MODAL ============ -->
        <section class="edit-form-section" *ngIf="isEditMode">
            <div class="edit-form-container">
                <div class="edit-form-header">
                    <h2><i class="fas fa-edit"></i> Edit Job Request #{{editingRequestId}}</h2>
                    <button class="close-btn" (click)="cancelEdit()" [disabled]="isSubmitting">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <!-- Success Message -->
                <div *ngIf="successMessage" class="success-message">
                    <i class="fas fa-check-circle"></i> {{successMessage}}
                </div>

                <!-- Error Message in Form -->
                <div *ngIf="errorMessage && isEditMode" class="error-message">
                    <i class="fas fa-exclamation-circle"></i> {{errorMessage}}
                </div>

                <form [formGroup]="editForm" (ngSubmit)="submitEditForm()">
                    <div class="form-grid">
                        <!-- Title -->
                        <div class="form-group full-width">
                            <label for="title">Job Title <span class="required">*</span></label>
                            <input
                                type="text"
                                id="title"
                                formControlName="title"
                                class="form-control"
                                placeholder="e.g., Senior React Developer"
                                [class.invalid]="editForm.get('title')?.invalid && editForm.get('title')?.touched"
                            />
                            <span class="error-text" *ngIf="editForm.get('title')?.invalid && editForm.get('title')?.touched">
                                Title is required (min 3 characters)
                            </span>
                        </div>

                        <!-- Description -->
                        <div class="form-group full-width">
                            <label for="description">Description <span class="required">*</span></label>
                            <textarea
                                id="description"
                                formControlName="description"
                                class="form-control"
                                rows="4"
                                placeholder="Describe the job requirements..."
                                [class.invalid]="editForm.get('description')?.invalid && editForm.get('description')?.touched"
                            ></textarea>
                            <span class="error-text" *ngIf="editForm.get('description')?.invalid && editForm.get('description')?.touched">
                                Description is required (min 10 characters)
                            </span>
                        </div>

                        <!-- Skills -->
                        <div class="form-group full-width">
                            <label for="skills">Required Skills</label>
                            <input
                                type="text"
                                id="skills"
                                formControlName="skills"
                                class="form-control"
                                placeholder="e.g., Java, Spring Boot, Angular (comma-separated)"
                            />
                        </div>

                        <!-- Experience Range -->
                        <div class="form-group">
                            <label for="minExperience">Min Experience (years) <span class="required">*</span></label>
                            <input
                                type="number"
                                id="minExperience"
                                formControlName="minExperience"
                                class="form-control"
                                min="0"
                                step="0.5"
                                [class.invalid]="editForm.get('minExperience')?.invalid && editForm.get('minExperience')?.touched"
                            />
                        </div>

                        <div class="form-group">
                            <label for="maxExperience">Max Experience (years) <span class="required">*</span></label>
                            <input
                                type="number"
                                id="maxExperience"
                                formControlName="maxExperience"
                                class="form-control"
                                min="0"
                                step="0.5"
                                [class.invalid]="editForm.get('maxExperience')?.invalid && editForm.get('maxExperience')?.touched"
                            />
                        </div>

                        <!-- CTC Range -->
                        <div class="form-group">
                            <label for="minCtc">Min CTC (₹) <span class="required">*</span></label>
                            <input
                                type="number"
                                id="minCtc"
                                formControlName="minCtc"
                                class="form-control"
                                min="0"
                                step="1000"
                                [class.invalid]="editForm.get('minCtc')?.invalid && editForm.get('minCtc')?.touched"
                            />
                        </div>

                        <div class="form-group">
                            <label for="maxCtc">Max CTC (₹) <span class="required">*</span></label>
                            <input
                                type="number"
                                id="maxCtc"
                                formControlName="maxCtc"
                                class="form-control"
                                min="0"
                                step="1000"
                                [class.invalid]="editForm.get('maxCtc')?.invalid && editForm.get('maxCtc')?.touched"
                            />
                        </div>

                        <!-- Status -->
                        <div class="form-group full-width">
                            <label for="status">Status</label>
                            <select id="status" formControlName="status" class="form-control">
                                <option value="SUBMITTED">Submitted</option>
                                <option value="APPROVED">Approved</option>
                                <option value="DECLINED">Declined</option>
                                <option value="REJECTED">Rejected</option>
                            </select>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <button
                            type="button"
                            class="btn-secondary"
                            (click)="cancelEdit()"
                            [disabled]="isSubmitting"
                        >
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <button
                            type="submit"
                            class="btn-primary"
                            [disabled]="editForm.invalid || isSubmitting"
                        >
                            <i class="fas fa-spinner fa-spin" *ngIf="isSubmitting"></i>
                            <i class="fas fa-save" *ngIf="!isSubmitting"></i>
                            {{ isSubmitting ? 'Updating...' : 'Update Request' }}
                        </button>
                    </div>
                </form>
            </div>
        </section>
        <!-- ============ END EDIT FORM MODAL ============ -->

        <!-- Create Job Request Button -->
        <section class="page-header">
            <br>
            <button class="btn-primary" (click)="createNewRequest()">
                <i class="fas fa-plus"></i> Create New Request
            </button>
        </section>

        <!-- Loading Spinner -->
        <div *ngIf="isLoading" class="loading-container">
            <i class="fas fa-spinner fa-spin"></i> Loading job requests...
        </div>

        <!-- Error Message -->
        <div *ngIf="errorMessage && !isLoading && !isEditMode" class="error-message">
            <i class="fas fa-exclamation-circle"></i> {{errorMessage}}
        </div>

        <!-- No Job Requests Message -->
        <div *ngIf="!isLoading && jobRequests.length === 0 && !errorMessage" class="no-data-message">
            <i class="fas fa-inbox"></i>
            <p>No job requests found. Create your first request to get started!</p>
        </div>

        <!-- Job Requests Grid -->
        <section class="cards-grid" *ngIf="!isLoading && jobRequests.length > 0">
            <!-- Dynamic Job Request Cards -->
            <div class="card" *ngFor="let request of jobRequests" [class.editing]="editingRequestId === request.jobRequestId">
                <div class="card-header">
                    <div>
                        <div class="card-title">{{request.title}}</div>
                        <div class="card-subtitle">
                            JR{{request.jobRequestId}} • Project ID: {{request.projectId}}
                        </div>
                    </div>
                    <span class="status-badge" [ngClass]="getStatusClass(request.status)">
                        {{getStatusLabel(request.status)}}
                    </span>
                </div>
                <div class="card-content">
                    <div class="info-row">
                        <span class="info-label">Description:</span>
                        <span class="info-value">{{request.description}}</span>
                    </div>
                    <div class="info-row" *ngIf="request.skills">
                        <span class="info-label">Required Skills:</span>
                        <span class="info-value">{{request.skills}}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Experience:</span>
                        <span class="info-value">
                            {{request.minExperience}} - {{request.maxExperience}} years
                        </span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Head Count:</span>
                        <span class="info-value">{{request.headCount}} Position(s)</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">CTC Range:</span>
                        <span class="info-value">
                            ₹{{request.minCtc}} - ₹{{request.maxCtc}}
                        </span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Priority:</span>
                        <span class="info-value" [ngClass]="getPriorityClass(request.priority)">
                            {{request.priority}}
                        </span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">Created:</span>
                        <span class="info-value">{{request.createdAt}}</span>
                    </div>
                    <div class="info-row" *ngIf="request.updatedAt !== request.createdAt">
                        <span class="info-label">Updated:</span>
                        <span class="info-value">{{request.updatedAt}}</span>
                    </div>
                </div>
                <div class="card-actions">
                    <button class="btn-sm btn-primary"
                            *ngIf="request.status === 'APPROVED'"
                            (click)="viewCandidates(request.jobRequestId)">
                        <i class="fas fa-users"></i> View Candidates
                    </button>
                    <button class="btn-sm btn-warning"
                            *ngIf="request.status === 'SUBMITTED'"
                            disabled>
                        <i class="fas fa-clock"></i> Waiting for Approval
                    </button>
                    <button class="btn-sm btn-edit" (click)="editRequest(request.jobRequestId)">
                        <i class="fas fa-edit"></i> Edit Request
                    </button>
                </div>
            </div>
        </section>
    </div>
</body>
</html>


CSS : 
/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Body and Container */
body {
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    min-height: 100vh;
    padding: 20px;
    overflow: auto;
}

.applications-container {
    max-width: 1200px;
    margin: 0 auto;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

/* Header Section */
.applications-header {
    background: linear-gradient(135deg, #1e2a95 0%, #3b4bd8 100%);
    color: white;
    padding: 40px;
    position: relative;
    overflow: hidden;
    border-radius: 20px;
}

.header-content {
    position: relative;
    z-index: 2;
}

.page-title {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 15px;
    background: linear-gradient(45deg, #fff, #e2e8f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.page-subtitle {
    font-size: 1.2rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 30px;
}

/* Stats Section */
.applications-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 30px;
    margin-top: 30px;
}

.stat-item {
    text-align: center;
    padding: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.stat-number {
    font-size: 2rem;
    font-weight: 800;
    color: #fff;
    margin-bottom: 5px;
}

.stat-label {
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.8);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Stats Section */
.applications-stats {
    display: grid;
    grid-template-columns: repeat(4, 1fr);  /* Four items in one row */
    gap: 25px;
    margin-top: 30px;
}

/* Individual stat item styling */
.stat-item {
    text-align: center;
    padding: 20px;
    border-radius: 12px;
    color: white;
    position: relative;
    background: linear-gradient(135deg, #4e73df, #1e2a95);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover effect */
.stat-item:hover {
    transform: translateY(-8px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* Different colors for the individual stat items */
.stats-total {
    background: linear-gradient(135deg, #4e73df, #1e2a95);
}

.stats-approved {
    background: linear-gradient(135deg, #28a745, #218838);
}

.stats-declined {
    background: linear-gradient(135deg, #dc3545, #c82333);
}

.stats-pending {
    background: linear-gradient(135deg, #ffc107, #e0a800);
}

/* Stat number styling */
.stat-number {
    font-size: 2.2rem;
    font-weight: 800;
    margin-bottom: 10px;
}

/* Stat label styling */
.stat-label {
    font-size: 1rem;
    font-weight: 600;
    letter-spacing: 1px;
    text-transform: uppercase;
    opacity: 0.8;
}

/* Added subtle hover on the stat label */
.stat-item:hover .stat-label {
    opacity: 1;
}


/* Cards Section */
.cards-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);  /* Two boxes per row */
    gap: 25px;
    margin-top: 40px;
}

/* Job Request Card */
.card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    transition: all 0.3s ease;
    position: relative;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

.card-title {
    font-size: 1.2rem;
    font-weight: 700;
    color: #0f172a;
}

.card-subtitle {
    color: #94a3b8;
    font-size: 0.9rem;
}

/* Status Badges */
.status-badge {
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.status-approved {
    background-color: #10b981;
    color: white;
}

.status-approved:hover {
    background-color: #059669;
}

.status-pending {
    background-color: #f59e0b;
    color: white;
}

.status-pending:hover {
    background-color: #eab308;
}

.status-declined {
    background-color: #ef4444;
    color: white;
}

.status-declined:hover {
    background-color: #dc2626;
}

.status-waiting {
    background-color: #4b8b3d;  /* Updated color for Waiting for Approval */
    color: white;
}

/* 'Waiting for PM Approval' Button */
.status-waiting-pm {
    background-color: #f59e0b; /* Golden yellow (pending state) */
    color: white;
    font-size: 0.9rem;
    font-weight: 600;
    padding: 10px 20px;
    border-radius: 20px;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

/* Hover Effect */
.status-waiting-pm:hover {
    background-color: #eab308; /* Brighter yellow */
    transform: scale(1.05);
}


.status-waiting:hover {
    background-color: #38773d;
}

/* Action Buttons */
.card-actions {
    margin-top: 20px;
    display: flex;
    gap: 12px;
}

.btn-primary, .btn-outline {
    padding: 10px 18px;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.3s ease;
}


/* 'Edit Request' Button */
.btn-edit {
    background-color: #6c757d; /* Neutral gray */
    color: white;
    font-size: 0.9rem;
    font-weight: 600;
    padding: 10px 20px;
    border-radius: 20px;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

/* Hover Effect */
.btn-edit:hover {
    background-color: #5a6268; /* Darker gray */
    transform: scale(1.05);
}


/* 'Waiting for PM Approval' Button */
.btn-warning {
    background: linear-gradient(135deg, #f59e0b, #eab308); /* Gradient effect */
    color: white;
    font-size: 0.9rem;
    font-weight: 600;
    padding: 12px 25px;
    border-radius: 50px;  /* Pill shape */
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    display: inline-flex;
    align-items: center;
    gap: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
}

/* Hover Effect */
.btn-warning:hover {
    background: linear-gradient(135deg, #eab308, #f59e0b); /* Reversed gradient for hover */
    transform: scale(1.05);  /* Slight grow effect */
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); /* Slight shadow increase on hover */
}

/* Focus Effect */
.btn-warning:focus {
    outline: none;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}


.btn-primary {
    background-color: #3b4bd8;
    color: white;
}

.btn-primary:hover {
    background-color: #1e2a95;
}

.btn-outline {
    background: transparent;
    color: #475569;
    border: 2px solid #e2e8f0;
}

.btn-outline:hover {
    background-color: #475569;
    color: white;
    border-color: #475569;
}

/* New Edit Button */
.btn-edit {
    background-color: #3b4bd8;
    color: white;
}

.btn-edit:hover {
    background-color: #1e2a95;
}

/* Waiting for PM Approval Button */
.btn-warning {
    background-color: #f59e0b;
    color: white;
}

.btn-warning:hover {
    background-color: #eab308;
}

/* Center the 'Create Job Request' Button */
.create-job-btn {
    display: block;
    width: 200px;
    padding: 12px;
    margin: 30px auto;
    background-color: #3b4bd8;
    color: white;
    border-radius: 50px;
    text-align: center;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.create-job-btn:hover {
    background-color: #1e2a95;
}

/* Responsive Design */
@media (max-width: 768px) {
    .applications-header {
        padding: 30px 20px;
    }

    .page-title {
        font-size: 2rem;
    }

    .applications-stats {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }

    .cards-grid {
        grid-template-columns: 1fr;
    }

    .card {
        padding: 15px;
    }

    .create-job-btn {
        width: 180px;
    }
}

.loading-container {
  text-align: center;
  padding: 40px;
  font-size: 18px;
  color: #666;
}

.loading-container i {
  font-size: 24px;
  margin-right: 10px;
}

.error-message {
  background-color: #fee;
  border: 1px solid #fcc;
  color: #c33;
  padding: 15px;
  margin: 20px;
  border-radius: 5px;
  text-align: center;
}

.no-data-message {
  text-align: center;
  padding: 60px 20px;
  color: #999;
}

.no-data-message i {
  font-size: 48px;
  margin-bottom: 20px;
  display: block;
}

.priority-high {
  color: #dc3545;
  font-weight: bold;
}

.priority-medium {
  color: #ffc107;
  font-weight: bold;
}

.priority-low {
  color: #28a745;
  font-weight: bold;
}

.status-approved {
  background-color: #d4edda;
  color: #155724;
}

.status-pending {
  background-color: #fff3cd;
  color: #856404;
}

.status-declined {
  background-color: #f8d7da;
  color: #721c24;
}
