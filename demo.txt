This is correct and working validations and validations are coming from backend.
Now read and understand this and do the same for the Candidate which i will give 
Employee : 
<body>
  <div class="login-container">
    <div class="logo-section">
      <div class="logo"></div>
      <div class="welcome-text">
        <h2>Welcome Back</h2>
        <p class="subtitle">Please sign in to your employee account</p>
      </div>
    </div>

    <div id="errorMessage" class="error-message"></div>
    <div id="successMessage" class="success-message"></div>

    <form id="loginForm" (submit)="loginEmployee()">
      <div class="form-group">
        <label for="employeeId">Employee ID</label>
        <div class="input-wrapper">
          <input
            type="text"
            id="employeeId"
            name="employeeId"
            placeholder="Enter your employee ID"
            [(ngModel)]="employeeLogin.employeeId"
            required
          />
          <div class="input-icon">ðŸ‘¤</div>
        </div>
      </div>
      @if (checkIfError("employeeId")) {
      <p style="color: red; margin-top: -20px; margin-bottom: 10px;">{{ getValidationErrorMessage('employeeId') }}</p>
      }

      <div class="form-group">
        <label for="password">Password</label>
        <div class="input-wrapper">
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Enter your password"
            [(ngModel)]="employeeLogin.password"
            required
          />
          <div class="input-icon">ðŸ”’</div>
        </div>
      </div>
      @if (checkIfError("password")) {
      <p style="color: red; margin-top: -20px; margin-bottom: 10px;">{{ getValidationErrorMessage('password') }}</p>
      }

      <div class="form-options">
        <label class="remember-me">
          <input type="checkbox" name="remember" />
          <span>Remember me</span>
        </label>
        <a href="#" class="forgot-password">Forgot password?</a>
      </div>

      <button type="submit" class="login-button" id="loginBtn">Sign In</button>
    </form>

    <div class="divider">
      <span>Need help?</span>
    </div>

    <div class="additional-options">
      <a href="#">
        <span>ðŸ“ž</span>
        Contact IT Support
      </a>
    </div>
  </div>
</body>

Emmployee.ts : 
import { Component } from '@angular/core';
import {
  FormControl,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { Router } from '@angular/router';
import { EmployeeLoginRequest } from '../../dto/EmployeeLoginRequest';
import { CandidateLoginResponseDto } from '../../dto/CandidateLoginResponseDto';
import { EmployeeLoginService } from '../../service/employee-login-service';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-employee-login',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './employee-login.html',
  styleUrl: './employee-login.css',
})
export class EmployeeLogin {
  employeeLogin: EmployeeLoginRequest = new EmployeeLoginRequest();
  employeeResponseDTo: CandidateLoginResponseDto = new CandidateLoginResponseDto();
  isLoading: boolean = false; // Added loading state
  validationErrors: {[key:string]:string}={};


  constructor(private employeeLoginService: EmployeeLoginService, private router: Router) {}


  checkIfError(fieldName:string){
    return fieldName in this.validationErrors;
  }
  getValidationErrorMessage(fieldName:string){
    return this.validationErrors[fieldName];

  }

  loginEmployee() {
    console.log(this.employeeLogin);
    this.isLoading = true;

    this.employeeLoginService.employeeLogin(this.employeeLogin).subscribe({
      next: (data) => {
        console.log(data);
        this.employeeResponseDTo = data;
        console.log(this.employeeResponseDTo);
        if (this.employeeResponseDTo.role == 'TEAMLEAD') {
          this.router.navigate(['tl-dashboard']);
        } else if (this.employeeResponseDTo.role == 'HR') {
          this.router.navigate(['hr-dashboard']);
        } else if (this.employeeResponseDTo.role == 'PROJECTMANAGER') {
          this.router.navigate(['pm-dashboard']);
        } else if (this.employeeResponseDTo.role == 'EMPLOYEE') {
          this.router.navigate(['candidateDashboard']);
        }
      },
      error: (err) => {
        console.log('Exception Occurred While Calling API');
        this.isLoading = false; // Stop loading on error
        console.log(err.error);
        this.validationErrors=err.error;

      },
      complete: () => {
        console.log('Data completed Successfully');
        this.isLoading = false; // Stop loading on completion
      },
    });
  }
}


