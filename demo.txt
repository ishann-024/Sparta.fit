❌ ERROR: HttpErrorResponse {headers: _HttpHeaders, status: 400, statusText: 'OK', url: 'http://localhost:8082/api/team-leader/create-job-requests', ok: false,

chunk-6J54M6DO.js?v=4fc44d6e:13384  POST http://localhost:8082/api/team-leader/create-job-requests 400 (Bad Request)

❌ ERROR: HttpErrorResponse {headers: _HttpHeaders, status: 400, statusText: 'OK', url: 'http://localhost:8082/api/team-leader/create-job-requests', ok: false, …}
error
: 
"{\"skills\":\"Skills is Required!\",\"headCount\":\"Headcount must be at least 1\",\"description\":\"Description is Required!\",\"priority\":\"Priority is Required!\",\"jobType\":\"JobType is Required!\",\"title\":\"Title is Required!\"}"
"http://localhost:8082/api/team-leader/create-job-requests"




jobRequestDTO: CreateJobRequestDTO = new CreateJobRequestDTO();
  isSubmitting = false;
  validationErrors: { [key: string]: string } = {};
  
  // Notification properties
  showNotification = false;
  isSuccess = false;
  notificationMessage = '';

  constructor(private tlService: TlService, private router: Router) {}

  // Validation helper methods
  checkIfError(fieldName: string): boolean {
    return fieldName in this.validationErrors;
  }

  getValidationErrorMessage(fieldName: string): string {
    return this.validationErrors[fieldName];
  }

  onSubmit(event: Event): void {
    event.preventDefault();
    this.validationErrors = {}; // Clear previous validation errors
    
    this.isSubmitting = true;
    
    this.tlService.createJobRequest(this.jobRequestDTO).subscribe({
      next: (response) => {
        console.log('✅ SUCCESS:', response);
        this.showSuccess('Job Request Created Successfully!');
        this.isSubmitting = false;
      },
      error: (error) => {
        console.error('❌ ERROR:', error);
        this.isSubmitting = false;
        
        // Handle validation errors from backend - FIXED VERSION
        if (error.status === 400 && error.error) {
          try {
            // Parse the JSON string to object if it's a string
            if (typeof error.error === 'string') {
              this.validationErrors = JSON.parse(error.error);
            } else {
              this.validationErrors = error.error;
            }
            this.showError('Please fix the validation errors below.');
          } catch (parseError) {
            console.error('Error parsing validation errors:', parseError);
            this.showError('Validation failed. Please check your inputs.');
          }
        } 
        // Handle 200 status with text response
        else if (error.status === 200 && error.error && error.error.text) {
          this.showSuccess(error.error.text);
        } else {
          this.showError('Failed to create job request. Please try again.');
        }
      }
    });
  }

  // Notification methods
  showSuccess(message: string): void {
    this.isSuccess = true;
    this.notificationMessage = message;
    this.showNotification = true;
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      this.hideNotification();
      // Navigate after notification disappears
      setTimeout(() => {
        this.router.navigate(['/tl-dashboard/job-requests']);
      }, 500);
    }, 5000);
  }

  showError(message: string): void {
    this.isSuccess = false;
    this.notificationMessage = message;
    this.showNotification = true;
    
    setTimeout(() => {
      this.hideNotification();
    }, 5000);
  }

  hideNotification(): void {
    this.showNotification = false;
  }

  cancel(): void {
    this.router.navigate(['/tl-dashboard/job-requests']);
  }
