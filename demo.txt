Help me create a form that helps in candidate registration , the backend details as follows  
I have already created a form just configure it 
Backend : 
public class CreateCandidateDTO {
	@Email
	@NotBlank
	private String email;
	@NotBlank
	private String password;
	@NotBlank
	private String confirmPassword;
	@NotBlank
	private String fullName;
	@NotBlank
	private String phoneNumber;
	@NotBlank
	private String previousRole;
}
Sample Response from Backend: 
{
    "candidateId": null,
    "email": "joeyspizza@example.com",
    "phoneNumber": "0099999999",
    "profileRole": null,
    "imagePath": null,
    "passwordHash": "$2a$10$xph4RbjaDoFqccszvVt3Ruv..lRS89CGwuO1i44p2Sv.Zerm2z9eC",
    "fullName": "Johnny Doe",
    "gender": null,
    "expectedCtc": null,
    "resumePath": null,
    "totalExperience": null,
    "noticePeriod": null,
    "currentCompany": null,
    "skills": null,
    "status": "PENDING_VERIFICATION",
    "createdAt": "2025-10-11",
    "updatedAt": "2025-10-11",
    "otp": null,
    "otpGeneratedAt": null
}

Controller :
@PostMapping("/create/candidate")
    public ResponseEntity<Candidate> createCandidate(@RequestBody CreateCandidateDTO createCandidateDTO) {
		if(!createCandidateDTO.getConfirmPassword().equals(createCandidateDTO.getPassword())) {
			return new ResponseEntity<>(new Candidate(), HttpStatus.BAD_REQUEST);
		}
        Candidate newCandidate = candidateService.createCandidate(createCandidateDTO);
        return new ResponseEntity<>(newCandidate, HttpStatus.OK);
}

Candidate - registration component : 
HTML :
<body>
    <div class="form-container">
        <h2>Candidate Registration</h2>

        <div id="successMessage" class="message success-message"></div>
        <div id="errorMessage" class="message error-message"></div>

        <form id="registrationForm">
            <div class="input-group">
                <label for="fullName">Full Name</label>
                <input type="text" id="fullName" name="fullName" placeholder="Enter your full name" required>
            </div>

            <div class="input-group">
                <label for="email">Email Address</label>
                <input type="email" id="email" name="email" placeholder="Enter your email address" required>
            </div>

            <div class="input-group">
                <label for="passwordHash">Password</label>
                <input type="password" id="passwordHash" name="passwordHash" placeholder="Create a strong password" required>
            </div>

            <div class="input-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" required>
            </div>

            <div class="input-group">
                <label for="phoneNumber">Phone Number</label>
                <input type="tel" id="phoneNumber" name="phoneNumber" pattern="[0-9]{10}" placeholder="e.g., 9876543210" required>
            </div>

            <div class="input-group">
                <label for="candidateRole">Previous Role</label>
                <input type="text" id="candidateRole" name="candidateRole" placeholder="Enter your previous role" required>
            </div>

            <button type="submit" class="register-btn" id="registerBtn">
                Create Account
            </button>

            <div class="login-link">
                <p>Already have an account?  <a routerLink="/dashboard/candidate-login">Login here</a></p>
            </div>
        </form>
    </div>

Component :
export class CandidateRegistration {

  candidateRegistrationDto:CandidateRegistrationDto=new CandidateRegistrationDto();
  output:string="";

  constructor(private candidateLoginService:CandidateLoginService,private router:Router){


  }


  candidateRegistartion(){
      console.log(this.candidateRegistrationDto);
      this.candidateLoginService.candidateRegistartion(this.candidateRegistrationDto).subscribe({
        next: (data) =>{
          this.output=data;
          console.log(this.output);
          this.router.navigate(['/dashboard/candidate-login'])
        },
        error: (err)=>{
          console.log("Exception Occured While Calling API");
          console.log(err.error);
        },
        complete: ()=>{
          console.log("Data completed Successfully");
        }
    });
    }

}
Service : 
export class CandidateLoginService{
  
  baseurl: string= "http://localhost:8082/api/auth/";
  registrationBaseUrl:string="http://localhost:8082/api/candidates/create/candidate"

  constructor(private httpClient:HttpClient){
  }

  candidatelogin(candidateLoginRequestdto : CandidateLoginRequestDto): Observable<CandidateLoginResponseDto>{

      return this.httpClient.post<CandidateLoginResponseDto>(this.baseurl + "login/candidate",candidateLoginRequestdto);
    
  }
  candidateRegistartion(candidateRegistartionDTO:CandidateRegistrationDto):Observable<string>{
    return this.httpClient.post<string>(this.registrationBaseUrl ,candidateRegistartionDTO , {responseType:'text' as 'json'});
  }
 
}
