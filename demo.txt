Fix this update Job request method 
@PostMapping("/job-requests/{jobRequestId}")
	public ResponseEntity<String> updateJobRequest(@PathVariable("jobRequestId") int jobRequestId,
			@RequestBody UpdateJobRequestDTO dto) {
		if(teamLeadService.updateJobRequest(jobRequestId, dto)) {
		return ResponseEntity.ok("Job Request Updated Successfully");
		}else {
			return ResponseEntity.ok("Job Request Failed ");
		}
		return ResponseEntity.status(HttpStatus.CREATED).body(teamLeadService.updateJobRequest(jobRequestId, dto));
	}

@Override
	public boolean updateJobRequest(int jobRequestId, UpdateJobRequestDTO dto) {
		JobRequest jobRequest = jobRequestMapper.toEntity(dto, jobRequestId);
		return teamLeadRepository.updateJobRequest(jobRequestId, dto);
	}

public boolean updateJobRequest(int jobRequestId, UpdateJobRequestDTO dto) {
		String sql = "UPDATE job_requests SET description = ?, skills = ?,experience_required = ?, min_ctc = ?, max_ctc = ?,updated_at = SYSDATE WHERE job_request_id = ?";

		return jdbcTemplate.update(sql, dto.getDescription(), dto.getSkills(), dto.getExperienceRequired(),
				dto.getMinCtc(), dto.getMaxCtc(), jobRequestId) > 0;
	}

public class JobRequestMapper {
	
	// Update DTO to Domain
	 public JobRequest toEntity(UpdateJobRequestDTO dto, int jobRequestId) {
	        JobRequest jobRequest = new JobRequest();
	        jobRequest.setJobRequestId(jobRequestId); // comes from path variable
	        jobRequest.setTitle(dto.getTitle());
	        jobRequest.setDescription(dto.getDescription());
	        jobRequest.setSkills(dto.getSkills());
	        jobRequest.setMinExperience(dto.getMinExperience());
	        jobRequest.setMaxExperience(dto.getMaxExperience());
	        jobRequest.setMinCtc(dto.getMinCtc());
	        jobRequest.setMaxCtc(dto.getMaxCtc());
	        //jobRequest.setPriority(dto.getPriority());

	        // Status is optional, if you want to allow TL to update it
	        if (dto.getStatus() != null) {
	            jobRequest.setStatus(dto.getStatus());
	        }

	        return jobRequest;
	    }

    // Domain → Response DTO
    public static ResponseJobRequestDTO toResponseDTO(JobRequest jobRequest) {
        ResponseJobRequestDTO dto = new ResponseJobRequestDTO();
        dto.setJobRequestId(jobRequest.getJobRequestId());
        dto.setProjectId(jobRequest.getProjectId());
        dto.setTeamLeaderId(jobRequest.getTeamLeaderId());
        dto.setPmId(jobRequest.getProjectManagerId());
        dto.setHrId(jobRequest.getHrId());
        dto.setTitle(jobRequest.getTitle());
        dto.setDescription(jobRequest.getDescription());
        dto.setSkills(jobRequest.getSkills());
        dto.setMaxExperience(jobRequest.getMaxExperience());
        dto.setMinExperience(jobRequest.getMinExperience());
        dto.setMaxCtc(jobRequest.getMaxCtc());
        dto.setMinCtc(jobRequest.getMinCtc());
        dto.setPriority(jobRequest.getPriority());
        dto.setStatus(jobRequest.getStatus());
        dto.setCreatedAt(jobRequest.getCreatedAt());
        dto.setUpdatedAt(jobRequest.getUpdatedAt());
        return dto;
    }

    // Create DTO → Domain
    public static JobRequest fromCreateDTO(CreateJobRequestDTO dto) {
        JobRequest jobRequest = new JobRequest();
        jobRequest.setProjectId(dto.getProjectId());
        jobRequest.setTeamLeaderId(dto.getTeamLeaderId());
        jobRequest.setTitle(dto.getTitle());
        jobRequest.setDescription(dto.getDescription());
        jobRequest.setSkills(dto.getSkills());
        jobRequest.setMinExperience(dto.getMinExperience());
        jobRequest.setMaxExperience(dto.getMaxExperience());
        jobRequest.setMinCtc(dto.getMinCtc());
        jobRequest.setMaxCtc(dto.getMaxCtc());
        jobRequest.setPriority(dto.getPriority());
        jobRequest.setStatus(JobRequestStatus.DRAFT); // default
        return jobRequest;
    }
}

public class UpdateJobRequestDTO {
	private String title;
	private String description;
	private double minCtc;
	private double maxCtc;
	private String skills;
	private int minExperience;
	private int maxExperience;
	private JobRequestStatus status;
	private String experienceRequired;
}

public class JobRequest {
    private int jobRequestId;
    private String teamLeaderId;
    private String projectManagerId;
    private String hrId;
    private int projectId;
    private String title;
    private String description;
    private String skills;
    //private int minExperience;
    //private int maxExperience;
    private double minExperience;
    private double maxExperience;
    private int headCount;
    private double minCtc;
    private double maxCtc;
    private String priority;  // HIGH, MEDIUM, LOW
    private JobRequestStatus status; // Enum: DRAFT, SUBMITTED, PM_REVIEWED, FORWARDED_TO_HR, CLOSED
    private LocalDate createdAt;
    private LocalDate updatedAt;
}
