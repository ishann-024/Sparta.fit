I am not able to see the alert in employee but i am able to see alert in candidate fix the issue 

@Injectable({
  providedIn: 'root'
})
export class EmployeeLoginService {
  
  baseurl: string = "http://localhost:8082/api/auth/";

  constructor(private httpClient: HttpClient, private router: Router) {}

  employeeLogin(employeeLogin: EmployeeLoginRequest): Observable<any> { 
    return this.httpClient.post<any>(this.baseurl + "login/employee", employeeLogin,
      { observe: 'response' } // This allows us to access full response including status
    );
  }
}


<body>
  <div class="login-container">
    <div class="logo-section">
      <div class="logo"></div>
      <div class="welcome-text">
        <h2>Welcome Back</h2>
        <p class="subtitle">Please sign in to your employee account</p>
      </div>
    </div>

    <!-- Error Message -->
    <div *ngIf="errorMessage" class="error-message alert alert-danger">
      <strong>Error:</strong> {{ errorMessage }}
    </div>

    <!-- Success Message -->
    <div *ngIf="successMessage" class="success-message alert alert-success">
      {{ successMessage }}
    </div>

    <!-- Loading State -->
    <div *ngIf="isLoading" class="loading-message">
      <div class="spinner"></div>
      Signing in...
    </div>

    <form id="loginForm" (submit)="loginEmployee()" [class.loading]="isLoading">
      <div class="form-group">
        <label for="employeeId">Employee ID</label>
        <div class="input-wrapper">
          <input
            type="text"
            id="employeeId"
            name="employeeId"
            placeholder="Enter your employee ID"
            [(ngModel)]="employeeLogin.employeeId"
            required
            [disabled]="isLoading"
          />
          <div class="input-icon">ðŸ‘¤</div>
        </div>
      </div>
      @if (checkIfError("employeeId")) {
      <p style="color: red; margin-top: -20px; margin-bottom: 10px">
        {{ getValidationErrorMessage('employeeId') }}
      </p>
      }

      <div class="form-group">
        <label for="password">Password</label>
        <div class="input-wrapper">
          <input
            type="password"
            id="password"
            name="password"
            placeholder="Enter your password"
            [(ngModel)]="employeeLogin.password"
            required
            [disabled]="isLoading"
          />
          <div class="input-icon">ðŸ”’</div>
        </div>
      </div>
      @if (checkIfError("password")) {
      <p style="color: red; margin-top: -20px; margin-bottom: 10px">
        {{ getValidationErrorMessage('password') }}
      </p>
      }

      <section class="content-area">
        <router-outlet></router-outlet>
      </section>

      <div class="form-options">
        <label class="remember-me">
          <input type="checkbox" name="remember" [disabled]="isLoading" />
          <span>Remember me</span>
        </label>
        <a routerLink="/dashboard/forgot-password" class="forgot-password"> Forgot password? </a>
      </div>

      <button type="submit" class="login-button" id="loginBtn" [disabled]="isLoading">
        <span *ngIf="!isLoading">Sign In</span>
        <span *ngIf="isLoading">Signing In...</span>
      </button>
    </form>

    <div class="divider">
      <span>Need help?</span>
    </div>

    <div class="additional-options">
      <a href="#">
        <span>ðŸ“ž</span>
        Contact IT Support
      </a>
    </div>
  </div>
</body>

.loading-message {
  text-align: center;
  padding: 10px;
  background: #f8f9fa;
  border-radius: 4px;
  margin-bottom: 15px;
}

.spinner {
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  animation: spin 1s linear infinite;
  display: inline-block;
  margin-right: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.alert {
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 15px;
}

.alert-danger {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.alert-success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.form-loading {
  opacity: 0.6;
  pointer-events: none;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

Compoenet :
export class EmployeeLogin {
  employeeLogin: EmployeeLoginRequest = new EmployeeLoginRequest();
  errorMessage: string = '';
  successMessage: string = '';
  isLoading: boolean = false;

  constructor(
    private employeeLoginService: EmployeeLoginService,
    private router: Router
  ) {}

  loginEmployee() {
    if (!this.employeeLogin.employeeId || !this.employeeLogin.password) {
      this.errorMessage = 'Please fill in all required fields';
      return;
    }

    this.isLoading = true;
    this.errorMessage = '';
    this.successMessage = '';

    this.employeeLoginService.employeeLogin(this.employeeLogin).subscribe({
      next: (response: any) => {
        this.isLoading = false;
        
        if (response.status === 200) {
          // Login successful
          console.log('Login successful:', response.body);
          this.router.navigate(['/dashboard/employee-dashboard']);
        }
      },
      error: (error: any) => {
        this.isLoading = false;
        
        if (error.status === 401) {
          // Invalid credentials
          if (error.error && error.error.message) {
            this.errorMessage = error.error.message;
          } else {
            this.errorMessage = 'Invalid employee ID or password. Please try again.';
          }
        } else if (error.status === 403) {
          this.errorMessage = 'Account is disabled. Please contact administrator.';
        } else if (error.status === 423) {
          this.errorMessage = 'Account is locked. Please contact administrator.';
        } else {
          this.errorMessage = 'Login failed. Please try again later.';
        }
        
        console.error('Login error:', error);
      }
    });
  }

  // Your existing validation methods
  checkIfError(fieldName: string): boolean {
    // Your existing validation logic
    return false;
  }

  getValidationErrorMessage(fieldName: string): string {
    // Your existing validation logic
    return '';
  }
}
