Check why am i getting error and give correct code This is an api to create a candidate 
Error : 
Caused by: java.lang.IllegalArgumentException: Property 'dataSource' is required
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.finalproject.main.repository.CandidateRepositoryImpl]: Constructor threw exception
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'candidateRepositoryImpl' defined in file [D:\Training\Final\FinalProject\target\classes\com\finalproject\main\repository\CandidateRepositoryImpl.class]: Failed to instantiate [com.finalproject.main.repository.CandidateRepositoryImpl]: Constructor threw exception
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'candidateAuthService' defined in file [D:\Training\Final\FinalProject\target\classes\com\finalproject\main\service\CandidateAuthService.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'candidateRepositoryImpl' defined in file [D:\Training\Final\FinalProject\target\classes\com\finalproject\main\repository\CandidateRepositoryImpl.class]: Failed to instantiate [com.finalproject.main.repository.CandidateRepositoryImpl]: Constructor threw exception


Controller : 
@PostMapping("create/candidate")
    public ResponseEntity<Candidate> createCandidate(@RequestBody CreateCandidateDTO createCandidateDTO) {
        Candidate newCandidate = candidateService.createCandidate(createCandidateDTO);
        return new ResponseEntity<>(newCandidate, HttpStatus.CREATED);
    }

Service : 
public Candidate createCandidate(CreateCandidateDTO createCandidateDTO) {
        // Use the manual mapper to convert the DTO to an entity
        Candidate candidate = candidateManualMapper.toEntity(createCandidateDTO);
        
        // Handle sensitive data and business logic in the service layer
        candidate.setPasswordHash(passwordEncoder.encode(createCandidateDTO.getPassword()));

        return candidateRepository.save(candidate);
    }

Repository : 
public Candidate save(Candidate candidate) {
        Map<String, Object> parameters = new HashMap<>();
        parameters.put("email", candidate.getEmail());
        parameters.put("full_name", candidate.getFullName());
        parameters.put("phone_number", candidate.getPhoneNumber());
        parameters.put("profile_role", candidate.getProfileRole());
        parameters.put("password_hash", candidate.getPasswordHash());
        parameters.put("status", candidate.getStatus());
        parameters.put("created_at", candidate.getCreatedAt());

        Number newId = simpleJdbcInsert.executeAndReturnKey(parameters);
        candidate.setCandidateId(newId.intValue());

        return candidate;
    }

Mapper : 
public class CandidateManualMapper {
	public Candidate toEntity(CreateCandidateDTO dto) {
        if (dto == null) {
            return null;
        }

        Candidate candidate = new Candidate();
        candidate.setEmail(dto.getEmail());
        candidate.setFullName(dto.getFullName());
        candidate.setPhoneNumber(dto.getPhoneNumber());
        candidate.setProfileRole(dto.getPreviousRole());
        candidate.setCreatedAt(LocalDate.now());
        candidate.setStatus("PENDING_VERIFICATION"); // Set initial status

        return candidate;
    }
}

Domain : 
public class Candidate {
	private Integer candidateId;
    private String email;
    private String phoneNumber;
    private String profileRole;
    private String imagePath;
    private String passwordHash;
    private String fullName;
    private String gender;
    private Double expectedCtc;
    private String resumePath;
    private Double totalExperience;
    private Integer noticePeriod;
    private String currentCompany;
    private String skills;
    private String status;
    private LocalDate createdAt;
    private LocalDate updatedAt;
	private String otp;
    private LocalDateTime otpGeneratedAt;
}


DTO :
@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateCandidateDTO {
	private String email;
	private String password;
	private String fullName;
	private String phoneNumber;
	private String previousRole;
}
