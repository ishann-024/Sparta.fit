ts:
export class CandidateLogin {
  
  loginDto: CandidateLoginRequestDto = new CandidateLoginRequestDto();
  candidateResponseDto: CandidateLoginResponseDto = new CandidateLoginResponseDto();
  isLoading: boolean = false;
  errorMessage: string = '';
  validationErrors: {[key:string]:string}={};

  constructor(
    private candidateLoginService: CandidateLoginService, 
    private router: Router
  ) {}

  checkIfError(fieldName:string){
    return fieldName in this.validationErrors;
  }
  getValidationErrorMessage(fieldName:string){
    return this.validationErrors[fieldName];

  }


  loginCandidates(loginForm: NgForm) {
    if (loginForm.invalid) {
      this.errorMessage = 'Please fill out all required fields.';
      return;
    }
    
    this.isLoading = true;
    this.errorMessage = ''; // Clear previous API error

    this.candidateLoginService.candidatelogin(this.loginDto).subscribe({
      next: (data) => {
        console.log(data);
        this.candidateResponseDto = data;
        sessionStorage.setItem("candidateId", this.candidateResponseDto.userId);
        this.router.navigate(['candidateDashboard']);
      },
      error: (err) => {
        console.error("Exception Occurred While Calling API", err);
        this.isLoading = false;
        // Display a user-friendly error message from the API
        this.errorMessage = err.error?.message || 'Login failed. Please check your credentials.';
         console.log(err.error);
        this.validationErrors=err.error;
      },
      complete: () => {
        console.log("Data completed Successfully");
        this.isLoading = false;
      }
    });
  }

  onLoginClick(form: NgForm, emailModel: any, passwordModel: any) {
  if (form.invalid) {
    // Trigger all validation messages
    emailModel.control.markAsTouched();
    passwordModel.control.markAsTouched();
    return;
  }

  // Call the original login method
  this.loginCandidates(form);
}
}
